// Code generated by protoc-gen-go. DO NOT EDIT.
// source: guery.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaskStatus int32

const (
	TaskStatus_TODO    TaskStatus = 0
	TaskStatus_RUNNING TaskStatus = 1
	TaskStatus_ERROR   TaskStatus = 2
	TaskStatus_SUCCEED TaskStatus = 3
)

var TaskStatus_name = map[int32]string{
	0: "TODO",
	1: "RUNNING",
	2: "ERROR",
	3: "SUCCEED",
}
var TaskStatus_value = map[string]int32{
	"TODO":    0,
	"RUNNING": 1,
	"ERROR":   2,
	"SUCCEED": 3,
}

func (x TaskStatus) String() string {
	return proto.EnumName(TaskStatus_name, int32(x))
}
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_guery_7459a59b12cf7dec, []int{0}
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_guery_7459a59b12cf7dec, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Location struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=Address" json:"Address,omitempty"`
	Port                 int32    `protobuf:"varint,3,opt,name=Port" json:"Port,omitempty"`
	ChannelIndex         int32    `protobuf:"varint,4,opt,name=ChannelIndex" json:"ChannelIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_guery_7459a59b12cf7dec, []int{1}
}
func (m *Location) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Location.Unmarshal(m, b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Location.Marshal(b, m, deterministic)
}
func (dst *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(dst, src)
}
func (m *Location) XXX_Size() int {
	return xxx_messageInfo_Location.Size(m)
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Location) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Location) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Location) GetChannelIndex() int32 {
	if m != nil {
		return m.ChannelIndex
	}
	return 0
}

type Heartbeat struct {
	Location             *Location    `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Status               int32        `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Instruction          *Instruction `protobuf:"bytes,3,opt,name=instruction" json:"instruction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Heartbeat) Reset()         { *m = Heartbeat{} }
func (m *Heartbeat) String() string { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()    {}
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_guery_7459a59b12cf7dec, []int{2}
}
func (m *Heartbeat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Heartbeat.Unmarshal(m, b)
}
func (m *Heartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Heartbeat.Marshal(b, m, deterministic)
}
func (dst *Heartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Heartbeat.Merge(dst, src)
}
func (m *Heartbeat) XXX_Size() int {
	return xxx_messageInfo_Heartbeat.Size(m)
}
func (m *Heartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_Heartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_Heartbeat proto.InternalMessageInfo

func (m *Heartbeat) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Heartbeat) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Heartbeat) GetInstruction() *Instruction {
	if m != nil {
		return m.Instruction
	}
	return nil
}

type Instruction struct {
	TaskId                int64     `protobuf:"varint,1,opt,name=taskId" json:"taskId,omitempty"`
	TaskType              int32     `protobuf:"varint,2,opt,name=taskType" json:"taskType,omitempty"`
	EncodedEPlanNodeBytes []byte    `protobuf:"bytes,3,opt,name=encodedEPlanNodeBytes,proto3" json:"encodedEPlanNodeBytes,omitempty"`
	RuntimeBytes          []byte    `protobuf:"bytes,4,opt,name=runtimeBytes,proto3" json:"runtimeBytes,omitempty"`
	Location              *Location `protobuf:"bytes,5,opt,name=location" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}  `json:"-"`
	XXX_unrecognized      []byte    `json:"-"`
	XXX_sizecache         int32     `json:"-"`
}

func (m *Instruction) Reset()         { *m = Instruction{} }
func (m *Instruction) String() string { return proto.CompactTextString(m) }
func (*Instruction) ProtoMessage()    {}
func (*Instruction) Descriptor() ([]byte, []int) {
	return fileDescriptor_guery_7459a59b12cf7dec, []int{3}
}
func (m *Instruction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Instruction.Unmarshal(m, b)
}
func (m *Instruction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Instruction.Marshal(b, m, deterministic)
}
func (dst *Instruction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instruction.Merge(dst, src)
}
func (m *Instruction) XXX_Size() int {
	return xxx_messageInfo_Instruction.Size(m)
}
func (m *Instruction) XXX_DiscardUnknown() {
	xxx_messageInfo_Instruction.DiscardUnknown(m)
}

var xxx_messageInfo_Instruction proto.InternalMessageInfo

func (m *Instruction) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *Instruction) GetTaskType() int32 {
	if m != nil {
		return m.TaskType
	}
	return 0
}

func (m *Instruction) GetEncodedEPlanNodeBytes() []byte {
	if m != nil {
		return m.EncodedEPlanNodeBytes
	}
	return nil
}

func (m *Instruction) GetRuntimeBytes() []byte {
	if m != nil {
		return m.RuntimeBytes
	}
	return nil
}

func (m *Instruction) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

type ExecutorHeartbeat struct {
	TaskId               int64      `protobuf:"varint,1,opt,name=TaskId" json:"TaskId,omitempty"`
	Status               TaskStatus `protobuf:"varint,2,opt,name=Status,enum=pb.TaskStatus" json:"Status,omitempty"`
	Location             *Location  `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	Info                 []byte     `protobuf:"bytes,4,opt,name=Info,proto3" json:"Info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ExecutorHeartbeat) Reset()         { *m = ExecutorHeartbeat{} }
func (m *ExecutorHeartbeat) String() string { return proto.CompactTextString(m) }
func (*ExecutorHeartbeat) ProtoMessage()    {}
func (*ExecutorHeartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_guery_7459a59b12cf7dec, []int{4}
}
func (m *ExecutorHeartbeat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecutorHeartbeat.Unmarshal(m, b)
}
func (m *ExecutorHeartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecutorHeartbeat.Marshal(b, m, deterministic)
}
func (dst *ExecutorHeartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutorHeartbeat.Merge(dst, src)
}
func (m *ExecutorHeartbeat) XXX_Size() int {
	return xxx_messageInfo_ExecutorHeartbeat.Size(m)
}
func (m *ExecutorHeartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutorHeartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutorHeartbeat proto.InternalMessageInfo

func (m *ExecutorHeartbeat) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *ExecutorHeartbeat) GetStatus() TaskStatus {
	if m != nil {
		return m.Status
	}
	return TaskStatus_TODO
}

func (m *ExecutorHeartbeat) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *ExecutorHeartbeat) GetInfo() []byte {
	if m != nil {
		return m.Info
	}
	return nil
}

type Task struct {
	TaskId               int64          `protobuf:"varint,1,opt,name=taskId" json:"taskId,omitempty"`
	Instructions         []*Instruction `protobuf:"bytes,2,rep,name=Instructions" json:"Instructions,omitempty"`
	Info                 *TaskInfo      `protobuf:"bytes,3,opt,name=Info" json:"Info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_guery_7459a59b12cf7dec, []int{5}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (dst *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(dst, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *Task) GetInstructions() []*Instruction {
	if m != nil {
		return m.Instructions
	}
	return nil
}

func (m *Task) GetInfo() *TaskInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type TaskInfo struct {
	TaskId               int64      `protobuf:"varint,1,opt,name=TaskId" json:"TaskId,omitempty"`
	Status               TaskStatus `protobuf:"varint,2,opt,name=Status,enum=pb.TaskStatus" json:"Status,omitempty"`
	Progress             float64    `protobuf:"fixed64,3,opt,name=Progress" json:"Progress,omitempty"`
	Info                 []byte     `protobuf:"bytes,4,opt,name=Info,proto3" json:"Info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TaskInfo) Reset()         { *m = TaskInfo{} }
func (m *TaskInfo) String() string { return proto.CompactTextString(m) }
func (*TaskInfo) ProtoMessage()    {}
func (*TaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_guery_7459a59b12cf7dec, []int{6}
}
func (m *TaskInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskInfo.Unmarshal(m, b)
}
func (m *TaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskInfo.Marshal(b, m, deterministic)
}
func (dst *TaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskInfo.Merge(dst, src)
}
func (m *TaskInfo) XXX_Size() int {
	return xxx_messageInfo_TaskInfo.Size(m)
}
func (m *TaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TaskInfo proto.InternalMessageInfo

func (m *TaskInfo) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *TaskInfo) GetStatus() TaskStatus {
	if m != nil {
		return m.Status
	}
	return TaskStatus_TODO
}

func (m *TaskInfo) GetProgress() float64 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *TaskInfo) GetInfo() []byte {
	if m != nil {
		return m.Info
	}
	return nil
}

type AgentHeartbeat struct {
	Location             *Location   `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	CpuNumber            int32       `protobuf:"varint,2,opt,name=CpuNumber" json:"CpuNumber,omitempty"`
	CpuUsage             []float64   `protobuf:"fixed64,3,rep,packed,name=CpuUsage" json:"CpuUsage,omitempty"`
	TotalMemory          int64       `protobuf:"varint,4,opt,name=TotalMemory" json:"TotalMemory,omitempty"`
	FreeMemory           int64       `protobuf:"varint,5,opt,name=FreeMemory" json:"FreeMemory,omitempty"`
	MaxExecutorNumber    int32       `protobuf:"varint,6,opt,name=MaxExecutorNumber" json:"MaxExecutorNumber,omitempty"`
	ExecutorNumber       int32       `protobuf:"varint,7,opt,name=ExecutorNumber" json:"ExecutorNumber,omitempty"`
	UpTime               int64       `protobuf:"varint,8,opt,name=UpTime" json:"UpTime,omitempty"`
	RunningTaskNumber    int32       `protobuf:"varint,10,opt,name=RunningTaskNumber" json:"RunningTaskNumber,omitempty"`
	TaskInfos            []*TaskInfo `protobuf:"bytes,11,rep,name=TaskInfos" json:"TaskInfos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AgentHeartbeat) Reset()         { *m = AgentHeartbeat{} }
func (m *AgentHeartbeat) String() string { return proto.CompactTextString(m) }
func (*AgentHeartbeat) ProtoMessage()    {}
func (*AgentHeartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_guery_7459a59b12cf7dec, []int{7}
}
func (m *AgentHeartbeat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AgentHeartbeat.Unmarshal(m, b)
}
func (m *AgentHeartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AgentHeartbeat.Marshal(b, m, deterministic)
}
func (dst *AgentHeartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentHeartbeat.Merge(dst, src)
}
func (m *AgentHeartbeat) XXX_Size() int {
	return xxx_messageInfo_AgentHeartbeat.Size(m)
}
func (m *AgentHeartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentHeartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_AgentHeartbeat proto.InternalMessageInfo

func (m *AgentHeartbeat) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *AgentHeartbeat) GetCpuNumber() int32 {
	if m != nil {
		return m.CpuNumber
	}
	return 0
}

func (m *AgentHeartbeat) GetCpuUsage() []float64 {
	if m != nil {
		return m.CpuUsage
	}
	return nil
}

func (m *AgentHeartbeat) GetTotalMemory() int64 {
	if m != nil {
		return m.TotalMemory
	}
	return 0
}

func (m *AgentHeartbeat) GetFreeMemory() int64 {
	if m != nil {
		return m.FreeMemory
	}
	return 0
}

func (m *AgentHeartbeat) GetMaxExecutorNumber() int32 {
	if m != nil {
		return m.MaxExecutorNumber
	}
	return 0
}

func (m *AgentHeartbeat) GetExecutorNumber() int32 {
	if m != nil {
		return m.ExecutorNumber
	}
	return 0
}

func (m *AgentHeartbeat) GetUpTime() int64 {
	if m != nil {
		return m.UpTime
	}
	return 0
}

func (m *AgentHeartbeat) GetRunningTaskNumber() int32 {
	if m != nil {
		return m.RunningTaskNumber
	}
	return 0
}

func (m *AgentHeartbeat) GetTaskInfos() []*TaskInfo {
	if m != nil {
		return m.TaskInfos
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*Location)(nil), "pb.Location")
	proto.RegisterType((*Heartbeat)(nil), "pb.Heartbeat")
	proto.RegisterType((*Instruction)(nil), "pb.Instruction")
	proto.RegisterType((*ExecutorHeartbeat)(nil), "pb.ExecutorHeartbeat")
	proto.RegisterType((*Task)(nil), "pb.Task")
	proto.RegisterType((*TaskInfo)(nil), "pb.TaskInfo")
	proto.RegisterType((*AgentHeartbeat)(nil), "pb.AgentHeartbeat")
	proto.RegisterEnum("pb.TaskStatus", TaskStatus_name, TaskStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GueryMaster service

type GueryMasterClient interface {
	SendHeartbeat(ctx context.Context, opts ...grpc.CallOption) (GueryMaster_SendHeartbeatClient, error)
}

type gueryMasterClient struct {
	cc *grpc.ClientConn
}

func NewGueryMasterClient(cc *grpc.ClientConn) GueryMasterClient {
	return &gueryMasterClient{cc}
}

func (c *gueryMasterClient) SendHeartbeat(ctx context.Context, opts ...grpc.CallOption) (GueryMaster_SendHeartbeatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GueryMaster_serviceDesc.Streams[0], c.cc, "/pb.GueryMaster/SendHeartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &gueryMasterSendHeartbeatClient{stream}
	return x, nil
}

type GueryMaster_SendHeartbeatClient interface {
	Send(*AgentHeartbeat) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type gueryMasterSendHeartbeatClient struct {
	grpc.ClientStream
}

func (x *gueryMasterSendHeartbeatClient) Send(m *AgentHeartbeat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gueryMasterSendHeartbeatClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GueryMaster service

type GueryMasterServer interface {
	SendHeartbeat(GueryMaster_SendHeartbeatServer) error
}

func RegisterGueryMasterServer(s *grpc.Server, srv GueryMasterServer) {
	s.RegisterService(&_GueryMaster_serviceDesc, srv)
}

func _GueryMaster_SendHeartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GueryMasterServer).SendHeartbeat(&gueryMasterSendHeartbeatServer{stream})
}

type GueryMaster_SendHeartbeatServer interface {
	SendAndClose(*Empty) error
	Recv() (*AgentHeartbeat, error)
	grpc.ServerStream
}

type gueryMasterSendHeartbeatServer struct {
	grpc.ServerStream
}

func (x *gueryMasterSendHeartbeatServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gueryMasterSendHeartbeatServer) Recv() (*AgentHeartbeat, error) {
	m := new(AgentHeartbeat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GueryMaster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GueryMaster",
	HandlerType: (*GueryMasterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendHeartbeat",
			Handler:       _GueryMaster_SendHeartbeat_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "guery.proto",
}

// Client API for GueryExecutor service

type GueryExecutorClient interface {
	Quit(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Restart(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Duplicate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SendInstruction(ctx context.Context, in *Instruction, opts ...grpc.CallOption) (*Empty, error)
	SetupWriters(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SetupReaders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Run(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	GetOutputChannelLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Location, error)
}

type gueryExecutorClient struct {
	cc *grpc.ClientConn
}

func NewGueryExecutorClient(cc *grpc.ClientConn) GueryExecutorClient {
	return &gueryExecutorClient{cc}
}

func (c *gueryExecutorClient) Quit(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.GueryExecutor/Quit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryExecutorClient) Restart(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.GueryExecutor/Restart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryExecutorClient) Duplicate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.GueryExecutor/Duplicate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryExecutorClient) SendInstruction(ctx context.Context, in *Instruction, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.GueryExecutor/SendInstruction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryExecutorClient) SetupWriters(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.GueryExecutor/SetupWriters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryExecutorClient) SetupReaders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.GueryExecutor/SetupReaders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryExecutorClient) Run(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.GueryExecutor/Run", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryExecutorClient) GetOutputChannelLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := grpc.Invoke(ctx, "/pb.GueryExecutor/GetOutputChannelLocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GueryExecutor service

type GueryExecutorServer interface {
	Quit(context.Context, *Empty) (*Empty, error)
	Restart(context.Context, *Empty) (*Empty, error)
	Duplicate(context.Context, *Empty) (*Empty, error)
	SendInstruction(context.Context, *Instruction) (*Empty, error)
	SetupWriters(context.Context, *Empty) (*Empty, error)
	SetupReaders(context.Context, *Empty) (*Empty, error)
	Run(context.Context, *Empty) (*Empty, error)
	GetOutputChannelLocation(context.Context, *Location) (*Location, error)
}

func RegisterGueryExecutorServer(s *grpc.Server, srv GueryExecutorServer) {
	s.RegisterService(&_GueryExecutor_serviceDesc, srv)
}

func _GueryExecutor_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryExecutorServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryExecutor/Quit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryExecutorServer).Quit(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryExecutor_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryExecutorServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryExecutor/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryExecutorServer).Restart(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryExecutor_Duplicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryExecutorServer).Duplicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryExecutor/Duplicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryExecutorServer).Duplicate(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryExecutor_SendInstruction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Instruction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryExecutorServer).SendInstruction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryExecutor/SendInstruction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryExecutorServer).SendInstruction(ctx, req.(*Instruction))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryExecutor_SetupWriters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryExecutorServer).SetupWriters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryExecutor/SetupWriters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryExecutorServer).SetupWriters(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryExecutor_SetupReaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryExecutorServer).SetupReaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryExecutor/SetupReaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryExecutorServer).SetupReaders(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryExecutor_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryExecutorServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryExecutor/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryExecutorServer).Run(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryExecutor_GetOutputChannelLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryExecutorServer).GetOutputChannelLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryExecutor/GetOutputChannelLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryExecutorServer).GetOutputChannelLocation(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

var _GueryExecutor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GueryExecutor",
	HandlerType: (*GueryExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Quit",
			Handler:    _GueryExecutor_Quit_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _GueryExecutor_Restart_Handler,
		},
		{
			MethodName: "Duplicate",
			Handler:    _GueryExecutor_Duplicate_Handler,
		},
		{
			MethodName: "SendInstruction",
			Handler:    _GueryExecutor_SendInstruction_Handler,
		},
		{
			MethodName: "SetupWriters",
			Handler:    _GueryExecutor_SetupWriters_Handler,
		},
		{
			MethodName: "SetupReaders",
			Handler:    _GueryExecutor_SetupReaders_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _GueryExecutor_Run_Handler,
		},
		{
			MethodName: "GetOutputChannelLocation",
			Handler:    _GueryExecutor_GetOutputChannelLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guery.proto",
}

// Client API for GueryAgent service

type GueryAgentClient interface {
	Quit(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Restart(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Duplicate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SendHeartbeat(ctx context.Context, opts ...grpc.CallOption) (GueryAgent_SendHeartbeatClient, error)
	SendTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error)
	KillTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error)
	Run(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error)
	GetOutputChannelLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Location, error)
}

type gueryAgentClient struct {
	cc *grpc.ClientConn
}

func NewGueryAgentClient(cc *grpc.ClientConn) GueryAgentClient {
	return &gueryAgentClient{cc}
}

func (c *gueryAgentClient) Quit(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.GueryAgent/Quit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryAgentClient) Restart(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.GueryAgent/Restart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryAgentClient) Duplicate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.GueryAgent/Duplicate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryAgentClient) SendHeartbeat(ctx context.Context, opts ...grpc.CallOption) (GueryAgent_SendHeartbeatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GueryAgent_serviceDesc.Streams[0], c.cc, "/pb.GueryAgent/SendHeartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &gueryAgentSendHeartbeatClient{stream}
	return x, nil
}

type GueryAgent_SendHeartbeatClient interface {
	Send(*ExecutorHeartbeat) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type gueryAgentSendHeartbeatClient struct {
	grpc.ClientStream
}

func (x *gueryAgentSendHeartbeatClient) Send(m *ExecutorHeartbeat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gueryAgentSendHeartbeatClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gueryAgentClient) SendTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.GueryAgent/SendTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryAgentClient) KillTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.GueryAgent/KillTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryAgentClient) Run(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.GueryAgent/Run", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryAgentClient) GetOutputChannelLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := grpc.Invoke(ctx, "/pb.GueryAgent/GetOutputChannelLocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GueryAgent service

type GueryAgentServer interface {
	Quit(context.Context, *Empty) (*Empty, error)
	Restart(context.Context, *Empty) (*Empty, error)
	Duplicate(context.Context, *Empty) (*Empty, error)
	SendHeartbeat(GueryAgent_SendHeartbeatServer) error
	SendTask(context.Context, *Task) (*Empty, error)
	KillTask(context.Context, *Task) (*Empty, error)
	Run(context.Context, *Task) (*Empty, error)
	GetOutputChannelLocation(context.Context, *Location) (*Location, error)
}

func RegisterGueryAgentServer(s *grpc.Server, srv GueryAgentServer) {
	s.RegisterService(&_GueryAgent_serviceDesc, srv)
}

func _GueryAgent_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryAgentServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryAgent/Quit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryAgentServer).Quit(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryAgent_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryAgentServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryAgent/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryAgentServer).Restart(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryAgent_Duplicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryAgentServer).Duplicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryAgent/Duplicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryAgentServer).Duplicate(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryAgent_SendHeartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GueryAgentServer).SendHeartbeat(&gueryAgentSendHeartbeatServer{stream})
}

type GueryAgent_SendHeartbeatServer interface {
	SendAndClose(*Empty) error
	Recv() (*ExecutorHeartbeat, error)
	grpc.ServerStream
}

type gueryAgentSendHeartbeatServer struct {
	grpc.ServerStream
}

func (x *gueryAgentSendHeartbeatServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gueryAgentSendHeartbeatServer) Recv() (*ExecutorHeartbeat, error) {
	m := new(ExecutorHeartbeat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GueryAgent_SendTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryAgentServer).SendTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryAgent/SendTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryAgentServer).SendTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryAgent_KillTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryAgentServer).KillTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryAgent/KillTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryAgentServer).KillTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryAgent_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryAgentServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryAgent/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryAgentServer).Run(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryAgent_GetOutputChannelLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryAgentServer).GetOutputChannelLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryAgent/GetOutputChannelLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryAgentServer).GetOutputChannelLocation(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

var _GueryAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GueryAgent",
	HandlerType: (*GueryAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Quit",
			Handler:    _GueryAgent_Quit_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _GueryAgent_Restart_Handler,
		},
		{
			MethodName: "Duplicate",
			Handler:    _GueryAgent_Duplicate_Handler,
		},
		{
			MethodName: "SendTask",
			Handler:    _GueryAgent_SendTask_Handler,
		},
		{
			MethodName: "KillTask",
			Handler:    _GueryAgent_KillTask_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _GueryAgent_Run_Handler,
		},
		{
			MethodName: "GetOutputChannelLocation",
			Handler:    _GueryAgent_GetOutputChannelLocation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendHeartbeat",
			Handler:       _GueryAgent_SendHeartbeat_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "guery.proto",
}

func init() { proto.RegisterFile("guery.proto", fileDescriptor_guery_7459a59b12cf7dec) }

var fileDescriptor_guery_7459a59b12cf7dec = []byte{
	// 766 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x4d, 0x6f, 0xda, 0x4a,
	0x14, 0x8d, 0x31, 0x1f, 0xe6, 0x9a, 0x10, 0x32, 0x52, 0x22, 0x0b, 0xe5, 0x45, 0xc4, 0x4f, 0x8a,
	0x50, 0xf4, 0x94, 0xa7, 0x92, 0x56, 0xaa, 0xd4, 0x55, 0x4a, 0x68, 0x8a, 0xda, 0x40, 0x3a, 0x80,
	0xba, 0x36, 0x78, 0x42, 0xad, 0xc2, 0xd8, 0x1a, 0xcf, 0x48, 0xa1, 0xab, 0xfe, 0x85, 0xfe, 0xa8,
	0x2e, 0xba, 0xec, 0x1f, 0xaa, 0xaa, 0x19, 0xdb, 0x18, 0x93, 0xc0, 0x22, 0x95, 0xba, 0xf3, 0xbd,
	0xe7, 0xf8, 0xde, 0x33, 0xe7, 0x5e, 0x8f, 0xc1, 0x9c, 0x0a, 0xc2, 0x16, 0xe7, 0x01, 0xf3, 0xb9,
	0x8f, 0x72, 0xc1, 0xd8, 0x2e, 0x41, 0xa1, 0x33, 0x0f, 0xf8, 0xc2, 0x0e, 0xc0, 0x78, 0xef, 0x4f,
	0x1c, 0xee, 0xf9, 0x14, 0x21, 0xc8, 0xf7, 0x9c, 0x39, 0xb1, 0xb4, 0x86, 0xd6, 0x2c, 0x63, 0xf5,
	0x8c, 0x2c, 0x28, 0x5d, 0xba, 0x2e, 0x23, 0x61, 0x68, 0xe5, 0x54, 0x3a, 0x09, 0x25, 0xfb, 0xd6,
	0x67, 0xdc, 0xd2, 0x1b, 0x5a, 0xb3, 0x80, 0xd5, 0x33, 0xb2, 0xa1, 0xd2, 0xfe, 0xe4, 0x50, 0x4a,
	0x66, 0x5d, 0xea, 0x92, 0x7b, 0x2b, 0xaf, 0xb0, 0x4c, 0xce, 0xfe, 0xaa, 0x41, 0xf9, 0x2d, 0x71,
	0x18, 0x1f, 0x13, 0x87, 0xa3, 0x26, 0x18, 0xb3, 0xb8, 0xbf, 0xea, 0x6b, 0xb6, 0x2a, 0xe7, 0xc1,
	0xf8, 0x3c, 0xd1, 0x84, 0x97, 0x28, 0x3a, 0x84, 0x62, 0xc8, 0x1d, 0x2e, 0x22, 0x21, 0x05, 0x1c,
	0x47, 0xe8, 0x19, 0x98, 0x1e, 0x0d, 0x39, 0x13, 0x13, 0x55, 0x44, 0x57, 0x45, 0xf6, 0x64, 0x91,
	0x6e, 0x9a, 0xc6, 0xab, 0x1c, 0xfb, 0xbb, 0x06, 0xe6, 0x0a, 0x28, 0x4b, 0x73, 0x27, 0xfc, 0xdc,
	0x75, 0x95, 0x04, 0x1d, 0xc7, 0x11, 0xaa, 0x83, 0x21, 0x9f, 0x86, 0x8b, 0x80, 0xc4, 0x4d, 0x97,
	0x31, 0x7a, 0x0e, 0x07, 0x84, 0x4e, 0x7c, 0x97, 0xb8, 0x9d, 0xdb, 0x99, 0x43, 0x7b, 0xbe, 0x4b,
	0x5e, 0x2f, 0x38, 0x09, 0x95, 0x80, 0x0a, 0x7e, 0x1c, 0x94, 0x06, 0x31, 0x41, 0xb9, 0x37, 0x8f,
	0xc9, 0x79, 0x45, 0xce, 0xe4, 0x32, 0x96, 0x14, 0xb6, 0x59, 0x62, 0x7f, 0xd3, 0x60, 0xbf, 0x73,
	0x4f, 0x26, 0x82, 0xfb, 0x2c, 0xb5, 0xf4, 0x10, 0x8a, 0xc3, 0xcc, 0x69, 0xa2, 0x08, 0x9d, 0x42,
	0x71, 0x90, 0x1a, 0x58, 0x6d, 0x55, 0x65, 0x55, 0x89, 0x45, 0x59, 0x1c, 0xa3, 0x99, 0xfe, 0xfa,
	0xd6, 0x91, 0x20, 0xc8, 0x77, 0xe9, 0x9d, 0x1f, 0x9f, 0x42, 0x3d, 0xdb, 0x02, 0xf2, 0xb2, 0xe6,
	0x46, 0x4f, 0x2f, 0xa0, 0xb2, 0x62, 0xbd, 0xd4, 0xa2, 0x3f, 0x36, 0xaf, 0x0c, 0x09, 0x35, 0xe2,
	0x46, 0x2b, 0x72, 0xd4, 0xa1, 0xe8, 0x9d, 0x1f, 0xb7, 0xfd, 0x02, 0x46, 0x92, 0xf9, 0x63, 0x03,
	0xea, 0x60, 0xdc, 0x32, 0x7f, 0xaa, 0x96, 0x5e, 0x76, 0xd4, 0xf0, 0x32, 0x7e, 0xf4, 0xc8, 0xbf,
	0x72, 0x50, 0xbd, 0x9c, 0x12, 0xca, 0x9f, 0xb2, 0xd6, 0x47, 0x50, 0x6e, 0x07, 0xa2, 0x27, 0xe6,
	0x63, 0xc2, 0xe2, 0x25, 0x4b, 0x13, 0x52, 0x4a, 0x3b, 0x10, 0xa3, 0xd0, 0x99, 0x12, 0x4b, 0x6f,
	0xe8, 0x52, 0x4a, 0x12, 0xa3, 0x06, 0x98, 0x43, 0x9f, 0x3b, 0xb3, 0x1b, 0x32, 0xf7, 0xd9, 0x42,
	0x29, 0xd2, 0xf1, 0x6a, 0x0a, 0x1d, 0x03, 0xbc, 0x61, 0x84, 0xc4, 0x84, 0x82, 0x22, 0xac, 0x64,
	0xd0, 0x7f, 0xb0, 0x7f, 0xe3, 0xdc, 0x27, 0x1b, 0x14, 0x6b, 0x28, 0x2a, 0x0d, 0x0f, 0x01, 0x74,
	0x0a, 0xd5, 0x35, 0x6a, 0x49, 0x51, 0xd7, 0xb2, 0xd2, 0xfe, 0x51, 0x30, 0xf4, 0xe6, 0xc4, 0x32,
	0x22, 0xfb, 0xa3, 0x48, 0x76, 0xc3, 0x82, 0x52, 0x8f, 0x4e, 0xa5, 0xe7, 0x71, 0x09, 0x88, 0xba,
	0x3d, 0x00, 0xd0, 0x19, 0x94, 0x93, 0x81, 0x86, 0x96, 0xa9, 0x96, 0x24, 0x3b, 0xf7, 0x14, 0x3e,
	0x7b, 0x05, 0x90, 0x8e, 0x11, 0x19, 0x90, 0x1f, 0xf6, 0xaf, 0xfa, 0xb5, 0x1d, 0x64, 0x42, 0x09,
	0x8f, 0x7a, 0xbd, 0x6e, 0xef, 0xba, 0xa6, 0xa1, 0x32, 0x14, 0x3a, 0x18, 0xf7, 0x71, 0x2d, 0x27,
	0xf3, 0x83, 0x51, 0xbb, 0xdd, 0xe9, 0x5c, 0xd5, 0xf4, 0xd6, 0x25, 0x98, 0xd7, 0xf2, 0x76, 0xbc,
	0x71, 0x42, 0x4e, 0x18, 0x6a, 0xc1, 0xee, 0x80, 0x50, 0x37, 0x1d, 0x25, 0x92, 0x5d, 0xb3, 0xe3,
	0xad, 0x97, 0x65, 0x2e, 0xba, 0x40, 0x77, 0x9a, 0x5a, 0xeb, 0x67, 0x0e, 0x76, 0x55, 0x8d, 0xc4,
	0x09, 0x74, 0x0c, 0xf9, 0x0f, 0xc2, 0xe3, 0x28, 0x25, 0x66, 0xde, 0x41, 0x27, 0x50, 0xc2, 0x24,
	0xe4, 0x0e, 0xdb, 0x4c, 0xf9, 0x17, 0xca, 0x57, 0x22, 0x98, 0x79, 0x13, 0x87, 0x93, 0x8d, 0xa4,
	0xff, 0x61, 0x4f, 0xaa, 0x5d, 0xbd, 0xcc, 0xd6, 0x3f, 0xa5, 0xec, 0x0b, 0xa7, 0x50, 0x19, 0x10,
	0x2e, 0x82, 0x8f, 0xcc, 0xe3, 0x84, 0x85, 0x1b, 0x0b, 0x27, 0x3c, 0x4c, 0x1c, 0x77, 0x1b, 0xef,
	0x1f, 0xd0, 0xb1, 0xa0, 0x1b, 0xe1, 0x97, 0x60, 0x5d, 0x13, 0xde, 0x17, 0x3c, 0x10, 0x3c, 0xfe,
	0x0b, 0x2c, 0x7f, 0x37, 0x99, 0x2f, 0xa2, 0x9e, 0x89, 0xec, 0x9d, 0xd6, 0x8f, 0x1c, 0x80, 0xf2,
	0x54, 0x59, 0xff, 0xd7, 0x0c, 0x7d, 0xb1, 0x3e, 0xfe, 0x03, 0x85, 0xae, 0x5f, 0xb2, 0x6b, 0x1b,
	0x80, 0x4e, 0xc0, 0x90, 0xaf, 0xa9, 0x9b, 0xcf, 0x48, 0xd6, 0x74, 0x5d, 0xa1, 0xf1, 0xce, 0x9b,
	0xcd, 0xb6, 0x51, 0x8e, 0x22, 0x33, 0x37, 0xa0, 0x4f, 0xf6, 0x72, 0x5c, 0x54, 0x3f, 0xfe, 0x8b,
	0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x11, 0x8f, 0x90, 0xf2, 0x07, 0x08, 0x00, 0x00,
}
