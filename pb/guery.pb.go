// Code generated by protoc-gen-go. DO NOT EDIT.
// source: guery.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_guery_f78889ed87c1577b, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Location struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	Port                 int32    `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	ChannelIndex         int32    `protobuf:"varint,4,opt,name=channelIndex" json:"channelIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_guery_f78889ed87c1577b, []int{1}
}
func (m *Location) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Location.Unmarshal(m, b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Location.Marshal(b, m, deterministic)
}
func (dst *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(dst, src)
}
func (m *Location) XXX_Size() int {
	return xxx_messageInfo_Location.Size(m)
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Location) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Location) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Location) GetChannelIndex() int32 {
	if m != nil {
		return m.ChannelIndex
	}
	return 0
}

type Heartbeat struct {
	Location             *Location    `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Status               int32        `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Instruction          *Instruction `protobuf:"bytes,3,opt,name=instruction" json:"instruction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Heartbeat) Reset()         { *m = Heartbeat{} }
func (m *Heartbeat) String() string { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()    {}
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_guery_f78889ed87c1577b, []int{2}
}
func (m *Heartbeat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Heartbeat.Unmarshal(m, b)
}
func (m *Heartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Heartbeat.Marshal(b, m, deterministic)
}
func (dst *Heartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Heartbeat.Merge(dst, src)
}
func (m *Heartbeat) XXX_Size() int {
	return xxx_messageInfo_Heartbeat.Size(m)
}
func (m *Heartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_Heartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_Heartbeat proto.InternalMessageInfo

func (m *Heartbeat) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Heartbeat) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Heartbeat) GetInstruction() *Instruction {
	if m != nil {
		return m.Instruction
	}
	return nil
}

type Instruction struct {
	TaskId                int64    `protobuf:"varint,1,opt,name=taskId" json:"taskId,omitempty"`
	TaskType              int32    `protobuf:"varint,2,opt,name=taskType" json:"taskType,omitempty"`
	EncodedEPlanNodeBytes []byte   `protobuf:"bytes,4,opt,name=encodedEPlanNodeBytes,proto3" json:"encodedEPlanNodeBytes,omitempty"`
	RuntimeBytes          []byte   `protobuf:"bytes,5,opt,name=runtimeBytes,proto3" json:"runtimeBytes,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *Instruction) Reset()         { *m = Instruction{} }
func (m *Instruction) String() string { return proto.CompactTextString(m) }
func (*Instruction) ProtoMessage()    {}
func (*Instruction) Descriptor() ([]byte, []int) {
	return fileDescriptor_guery_f78889ed87c1577b, []int{3}
}
func (m *Instruction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Instruction.Unmarshal(m, b)
}
func (m *Instruction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Instruction.Marshal(b, m, deterministic)
}
func (dst *Instruction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instruction.Merge(dst, src)
}
func (m *Instruction) XXX_Size() int {
	return xxx_messageInfo_Instruction.Size(m)
}
func (m *Instruction) XXX_DiscardUnknown() {
	xxx_messageInfo_Instruction.DiscardUnknown(m)
}

var xxx_messageInfo_Instruction proto.InternalMessageInfo

func (m *Instruction) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *Instruction) GetTaskType() int32 {
	if m != nil {
		return m.TaskType
	}
	return 0
}

func (m *Instruction) GetEncodedEPlanNodeBytes() []byte {
	if m != nil {
		return m.EncodedEPlanNodeBytes
	}
	return nil
}

func (m *Instruction) GetRuntimeBytes() []byte {
	if m != nil {
		return m.RuntimeBytes
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*Location)(nil), "pb.Location")
	proto.RegisterType((*Heartbeat)(nil), "pb.Heartbeat")
	proto.RegisterType((*Instruction)(nil), "pb.Instruction")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GueryMasterClient is the client API for GueryMaster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GueryMasterClient interface {
	SendHeartbeat(ctx context.Context, opts ...grpc.CallOption) (GueryMaster_SendHeartbeatClient, error)
}

type gueryMasterClient struct {
	cc *grpc.ClientConn
}

func NewGueryMasterClient(cc *grpc.ClientConn) GueryMasterClient {
	return &gueryMasterClient{cc}
}

func (c *gueryMasterClient) SendHeartbeat(ctx context.Context, opts ...grpc.CallOption) (GueryMaster_SendHeartbeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GueryMaster_serviceDesc.Streams[0], "/pb.GueryMaster/SendHeartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &gueryMasterSendHeartbeatClient{stream}
	return x, nil
}

type GueryMaster_SendHeartbeatClient interface {
	Send(*Heartbeat) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type gueryMasterSendHeartbeatClient struct {
	grpc.ClientStream
}

func (x *gueryMasterSendHeartbeatClient) Send(m *Heartbeat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gueryMasterSendHeartbeatClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GueryMasterServer is the server API for GueryMaster service.
type GueryMasterServer interface {
	SendHeartbeat(GueryMaster_SendHeartbeatServer) error
}

func RegisterGueryMasterServer(s *grpc.Server, srv GueryMasterServer) {
	s.RegisterService(&_GueryMaster_serviceDesc, srv)
}

func _GueryMaster_SendHeartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GueryMasterServer).SendHeartbeat(&gueryMasterSendHeartbeatServer{stream})
}

type GueryMaster_SendHeartbeatServer interface {
	SendAndClose(*Empty) error
	Recv() (*Heartbeat, error)
	grpc.ServerStream
}

type gueryMasterSendHeartbeatServer struct {
	grpc.ServerStream
}

func (x *gueryMasterSendHeartbeatServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gueryMasterSendHeartbeatServer) Recv() (*Heartbeat, error) {
	m := new(Heartbeat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GueryMaster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GueryMaster",
	HandlerType: (*GueryMasterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendHeartbeat",
			Handler:       _GueryMaster_SendHeartbeat_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "guery.proto",
}

// GueryExecutorClient is the client API for GueryExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GueryExecutorClient interface {
	Quit(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Restart(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Duplicate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SendInstruction(ctx context.Context, in *Instruction, opts ...grpc.CallOption) (*Empty, error)
	SetupWriters(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SetupReaders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Run(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	GetOutputChannelLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Location, error)
}

type gueryExecutorClient struct {
	cc *grpc.ClientConn
}

func NewGueryExecutorClient(cc *grpc.ClientConn) GueryExecutorClient {
	return &gueryExecutorClient{cc}
}

func (c *gueryExecutorClient) Quit(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.GueryExecutor/Quit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryExecutorClient) Restart(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.GueryExecutor/Restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryExecutorClient) Duplicate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.GueryExecutor/Duplicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryExecutorClient) SendInstruction(ctx context.Context, in *Instruction, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.GueryExecutor/SendInstruction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryExecutorClient) SetupWriters(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.GueryExecutor/SetupWriters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryExecutorClient) SetupReaders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.GueryExecutor/SetupReaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryExecutorClient) Run(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.GueryExecutor/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryExecutorClient) GetOutputChannelLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := c.cc.Invoke(ctx, "/pb.GueryExecutor/GetOutputChannelLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GueryExecutorServer is the server API for GueryExecutor service.
type GueryExecutorServer interface {
	Quit(context.Context, *Empty) (*Empty, error)
	Restart(context.Context, *Empty) (*Empty, error)
	Duplicate(context.Context, *Empty) (*Empty, error)
	SendInstruction(context.Context, *Instruction) (*Empty, error)
	SetupWriters(context.Context, *Empty) (*Empty, error)
	SetupReaders(context.Context, *Empty) (*Empty, error)
	Run(context.Context, *Empty) (*Empty, error)
	GetOutputChannelLocation(context.Context, *Location) (*Location, error)
}

func RegisterGueryExecutorServer(s *grpc.Server, srv GueryExecutorServer) {
	s.RegisterService(&_GueryExecutor_serviceDesc, srv)
}

func _GueryExecutor_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryExecutorServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryExecutor/Quit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryExecutorServer).Quit(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryExecutor_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryExecutorServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryExecutor/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryExecutorServer).Restart(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryExecutor_Duplicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryExecutorServer).Duplicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryExecutor/Duplicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryExecutorServer).Duplicate(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryExecutor_SendInstruction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Instruction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryExecutorServer).SendInstruction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryExecutor/SendInstruction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryExecutorServer).SendInstruction(ctx, req.(*Instruction))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryExecutor_SetupWriters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryExecutorServer).SetupWriters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryExecutor/SetupWriters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryExecutorServer).SetupWriters(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryExecutor_SetupReaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryExecutorServer).SetupReaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryExecutor/SetupReaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryExecutorServer).SetupReaders(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryExecutor_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryExecutorServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryExecutor/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryExecutorServer).Run(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryExecutor_GetOutputChannelLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryExecutorServer).GetOutputChannelLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryExecutor/GetOutputChannelLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryExecutorServer).GetOutputChannelLocation(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

var _GueryExecutor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GueryExecutor",
	HandlerType: (*GueryExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Quit",
			Handler:    _GueryExecutor_Quit_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _GueryExecutor_Restart_Handler,
		},
		{
			MethodName: "Duplicate",
			Handler:    _GueryExecutor_Duplicate_Handler,
		},
		{
			MethodName: "SendInstruction",
			Handler:    _GueryExecutor_SendInstruction_Handler,
		},
		{
			MethodName: "SetupWriters",
			Handler:    _GueryExecutor_SetupWriters_Handler,
		},
		{
			MethodName: "SetupReaders",
			Handler:    _GueryExecutor_SetupReaders_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _GueryExecutor_Run_Handler,
		},
		{
			MethodName: "GetOutputChannelLocation",
			Handler:    _GueryExecutor_GetOutputChannelLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guery.proto",
}

func init() { proto.RegisterFile("guery.proto", fileDescriptor_guery_f78889ed87c1577b) }

var fileDescriptor_guery_f78889ed87c1577b = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xdd, 0xaa, 0x13, 0x31,
	0x10, 0x3e, 0xdb, 0x9f, 0xd3, 0x76, 0xb6, 0xe5, 0x40, 0x40, 0x59, 0x0a, 0xca, 0x71, 0x05, 0xe9,
	0x8d, 0x15, 0xab, 0x17, 0x5e, 0x78, 0xa5, 0x96, 0x63, 0xc1, 0xdf, 0x1c, 0xc1, 0xeb, 0x74, 0x33,
	0xe8, 0x62, 0x9b, 0x84, 0x64, 0x02, 0xed, 0x9d, 0xef, 0xe1, 0x53, 0xf9, 0x46, 0x92, 0x74, 0xbb,
	0xed, 0x8a, 0xeb, 0xdd, 0x7c, 0x33, 0xdf, 0x7c, 0x33, 0x99, 0x99, 0x40, 0xfa, 0xcd, 0xa3, 0xdd,
	0xcf, 0x8d, 0xd5, 0xa4, 0x59, 0xc7, 0xac, 0xf3, 0x01, 0xf4, 0x97, 0x5b, 0x43, 0xfb, 0xdc, 0xc0,
	0xf0, 0x9d, 0x2e, 0x04, 0x95, 0x5a, 0x31, 0x06, 0x3d, 0x25, 0xb6, 0x98, 0x25, 0xd7, 0xc9, 0x6c,
	0xc4, 0xa3, 0xcd, 0x32, 0x18, 0x08, 0x29, 0x2d, 0x3a, 0x97, 0x75, 0xa2, 0xfb, 0x08, 0x03, 0xdb,
	0x68, 0x4b, 0x59, 0xf7, 0x3a, 0x99, 0xf5, 0x79, 0xb4, 0x59, 0x0e, 0xe3, 0xe2, 0xbb, 0x50, 0x0a,
	0x37, 0x2b, 0x25, 0x71, 0x97, 0xf5, 0x62, 0xac, 0xe1, 0xcb, 0x7f, 0x26, 0x30, 0x7a, 0x8b, 0xc2,
	0xd2, 0x1a, 0x05, 0xb1, 0x19, 0x0c, 0x37, 0x55, 0xfd, 0x58, 0x37, 0x5d, 0x8c, 0xe7, 0x66, 0x3d,
	0x3f, 0xf6, 0xc4, 0xeb, 0x28, 0xbb, 0x0b, 0x97, 0x8e, 0x04, 0xf9, 0x43, 0x23, 0x7d, 0x5e, 0x21,
	0xf6, 0x14, 0xd2, 0x52, 0x39, 0xb2, 0xbe, 0x88, 0x22, 0xdd, 0x28, 0x72, 0x15, 0x44, 0x56, 0x27,
	0x37, 0x3f, 0xe7, 0xe4, 0xbf, 0x12, 0x48, 0xcf, 0x82, 0x41, 0x9a, 0x84, 0xfb, 0xb1, 0x92, 0xb1,
	0x85, 0x2e, 0xaf, 0x10, 0x9b, 0xc2, 0x30, 0x58, 0x5f, 0xf6, 0x06, 0xab, 0xa2, 0x35, 0x66, 0xcf,
	0xe1, 0x0e, 0xaa, 0x42, 0x4b, 0x94, 0xcb, 0x4f, 0x1b, 0xa1, 0x3e, 0x68, 0x89, 0xaf, 0xf6, 0x84,
	0x2e, 0xbe, 0x79, 0xcc, 0xff, 0x1d, 0x0c, 0x03, 0xb2, 0x5e, 0x51, 0xb9, 0xad, 0xc8, 0xfd, 0x48,
	0x6e, 0xf8, 0x16, 0x2f, 0x21, 0xbd, 0x09, 0xeb, 0x7a, 0x2f, 0x1c, 0xa1, 0x65, 0x8f, 0x61, 0x72,
	0x8b, 0x4a, 0x9e, 0x46, 0x36, 0x09, 0x6f, 0xab, 0xe1, 0x74, 0x14, 0xe0, 0x61, 0x99, 0x17, 0xb3,
	0x64, 0xf1, 0xbb, 0x03, 0x93, 0x98, 0xbe, 0xdc, 0x61, 0xe1, 0x49, 0x5b, 0x76, 0x1f, 0x7a, 0x9f,
	0x7d, 0x49, 0xec, 0x44, 0x6c, 0xe4, 0xb0, 0x07, 0x30, 0xe0, 0xe8, 0x48, 0xd8, 0x76, 0xca, 0x43,
	0x18, 0xbd, 0xf1, 0x66, 0x53, 0x16, 0x82, 0xb0, 0x95, 0xf4, 0x04, 0xae, 0x42, 0xa3, 0xe7, 0x83,
	0xfd, 0x7b, 0x0d, 0xcd, 0x84, 0x47, 0x30, 0xbe, 0x45, 0xf2, 0xe6, 0xab, 0x2d, 0x09, 0xad, 0x6b,
	0x15, 0x3e, 0xf2, 0x38, 0x0a, 0xf9, 0x3f, 0xde, 0x3d, 0xe8, 0x72, 0xaf, 0x5a, 0xc3, 0x2f, 0x20,
	0xbb, 0x41, 0xfa, 0xe8, 0xc9, 0x78, 0x7a, 0x7d, 0xb8, 0xc8, 0xfa, 0xf4, 0x1b, 0x47, 0x37, 0x6d,
	0xa0, 0xfc, 0x62, 0x7d, 0x19, 0x3f, 0xce, 0xb3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x61, 0xa8,
	0x69, 0x41, 0x47, 0x03, 0x00, 0x00,
}
