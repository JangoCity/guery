// Code generated by protoc-gen-go. DO NOT EDIT.
// source: guery.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	guery.proto

It has these top-level messages:
	Empty
	Location
	Heartbeat
	Instruction
	QuerySQL
	QueryResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Location struct {
	DataCenter   string `protobuf:"bytes,1,opt,name=dataCenter" json:"dataCenter,omitempty"`
	Rack         string `protobuf:"bytes,2,opt,name=rack" json:"rack,omitempty"`
	Address      string `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
	Name         string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	ChannelIndex int32  `protobuf:"varint,5,opt,name=channelIndex" json:"channelIndex,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Location) GetDataCenter() string {
	if m != nil {
		return m.DataCenter
	}
	return ""
}

func (m *Location) GetRack() string {
	if m != nil {
		return m.Rack
	}
	return ""
}

func (m *Location) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Location) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Location) GetChannelIndex() int32 {
	if m != nil {
		return m.ChannelIndex
	}
	return 0
}

type Heartbeat struct {
	Location    *Location    `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Resource    int32        `protobuf:"varint,2,opt,name=resource" json:"resource,omitempty"`
	Instruction *Instruction `protobuf:"bytes,3,opt,name=instruction" json:"instruction,omitempty"`
}

func (m *Heartbeat) Reset()                    { *m = Heartbeat{} }
func (m *Heartbeat) String() string            { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()               {}
func (*Heartbeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Heartbeat) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Heartbeat) GetResource() int32 {
	if m != nil {
		return m.Resource
	}
	return 0
}

func (m *Heartbeat) GetInstruction() *Instruction {
	if m != nil {
		return m.Instruction
	}
	return nil
}

type Instruction struct {
	TaskId               int32       `protobuf:"varint,1,opt,name=taskId" json:"taskId,omitempty"`
	TaskType             int32       `protobuf:"varint,2,opt,name=taskType" json:"taskType,omitempty"`
	InputLocations       []*Location `protobuf:"bytes,3,rep,name=inputLocations" json:"inputLocations,omitempty"`
	OutputLocations      []*Location `protobuf:"bytes,4,rep,name=outputLocations" json:"outputLocations,omitempty"`
	EncodedPlanNodeBytes string      `protobuf:"bytes,5,opt,name=encodedPlanNodeBytes" json:"encodedPlanNodeBytes,omitempty"`
}

func (m *Instruction) Reset()                    { *m = Instruction{} }
func (m *Instruction) String() string            { return proto.CompactTextString(m) }
func (*Instruction) ProtoMessage()               {}
func (*Instruction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Instruction) GetTaskId() int32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *Instruction) GetTaskType() int32 {
	if m != nil {
		return m.TaskType
	}
	return 0
}

func (m *Instruction) GetInputLocations() []*Location {
	if m != nil {
		return m.InputLocations
	}
	return nil
}

func (m *Instruction) GetOutputLocations() []*Location {
	if m != nil {
		return m.OutputLocations
	}
	return nil
}

func (m *Instruction) GetEncodedPlanNodeBytes() string {
	if m != nil {
		return m.EncodedPlanNodeBytes
	}
	return ""
}

type QuerySQL struct {
	SQL string `protobuf:"bytes,1,opt,name=SQL" json:"SQL,omitempty"`
}

func (m *QuerySQL) Reset()                    { *m = QuerySQL{} }
func (m *QuerySQL) String() string            { return proto.CompactTextString(m) }
func (*QuerySQL) ProtoMessage()               {}
func (*QuerySQL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *QuerySQL) GetSQL() string {
	if m != nil {
		return m.SQL
	}
	return ""
}

type QueryResponse struct {
	ColumnNumber int32    `protobuf:"varint,1,opt,name=ColumnNumber" json:"ColumnNumber,omitempty"`
	ColumnName   []string `protobuf:"bytes,2,rep,name=ColumnName" json:"ColumnName,omitempty"`
	ColumnType   []string `protobuf:"bytes,3,rep,name=ColumnType" json:"ColumnType,omitempty"`
	ColumnValue  []string `protobuf:"bytes,4,rep,name=ColumnValue" json:"ColumnValue,omitempty"`
}

func (m *QueryResponse) Reset()                    { *m = QueryResponse{} }
func (m *QueryResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()               {}
func (*QueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *QueryResponse) GetColumnNumber() int32 {
	if m != nil {
		return m.ColumnNumber
	}
	return 0
}

func (m *QueryResponse) GetColumnName() []string {
	if m != nil {
		return m.ColumnName
	}
	return nil
}

func (m *QueryResponse) GetColumnType() []string {
	if m != nil {
		return m.ColumnType
	}
	return nil
}

func (m *QueryResponse) GetColumnValue() []string {
	if m != nil {
		return m.ColumnValue
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*Location)(nil), "pb.Location")
	proto.RegisterType((*Heartbeat)(nil), "pb.Heartbeat")
	proto.RegisterType((*Instruction)(nil), "pb.Instruction")
	proto.RegisterType((*QuerySQL)(nil), "pb.QuerySQL")
	proto.RegisterType((*QueryResponse)(nil), "pb.QueryResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GueryMaster service

type GueryMasterClient interface {
	SendHeartbeat(ctx context.Context, opts ...grpc.CallOption) (GueryMaster_SendHeartbeatClient, error)
	Query(ctx context.Context, in *QuerySQL, opts ...grpc.CallOption) (*QueryResponse, error)
}

type gueryMasterClient struct {
	cc *grpc.ClientConn
}

func NewGueryMasterClient(cc *grpc.ClientConn) GueryMasterClient {
	return &gueryMasterClient{cc}
}

func (c *gueryMasterClient) SendHeartbeat(ctx context.Context, opts ...grpc.CallOption) (GueryMaster_SendHeartbeatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GueryMaster_serviceDesc.Streams[0], c.cc, "/pb.GueryMaster/SendHeartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &gueryMasterSendHeartbeatClient{stream}
	return x, nil
}

type GueryMaster_SendHeartbeatClient interface {
	Send(*Heartbeat) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type gueryMasterSendHeartbeatClient struct {
	grpc.ClientStream
}

func (x *gueryMasterSendHeartbeatClient) Send(m *Heartbeat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gueryMasterSendHeartbeatClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gueryMasterClient) Query(ctx context.Context, in *QuerySQL, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := grpc.Invoke(ctx, "/pb.GueryMaster/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GueryMaster service

type GueryMasterServer interface {
	SendHeartbeat(GueryMaster_SendHeartbeatServer) error
	Query(context.Context, *QuerySQL) (*QueryResponse, error)
}

func RegisterGueryMasterServer(s *grpc.Server, srv GueryMasterServer) {
	s.RegisterService(&_GueryMaster_serviceDesc, srv)
}

func _GueryMaster_SendHeartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GueryMasterServer).SendHeartbeat(&gueryMasterSendHeartbeatServer{stream})
}

type GueryMaster_SendHeartbeatServer interface {
	SendAndClose(*Empty) error
	Recv() (*Heartbeat, error)
	grpc.ServerStream
}

type gueryMasterSendHeartbeatServer struct {
	grpc.ServerStream
}

func (x *gueryMasterSendHeartbeatServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gueryMasterSendHeartbeatServer) Recv() (*Heartbeat, error) {
	m := new(Heartbeat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GueryMaster_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySQL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryMasterServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryMaster/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryMasterServer).Query(ctx, req.(*QuerySQL))
	}
	return interceptor(ctx, in, info, handler)
}

var _GueryMaster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GueryMaster",
	HandlerType: (*GueryMasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _GueryMaster_Query_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendHeartbeat",
			Handler:       _GueryMaster_SendHeartbeat_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "guery.proto",
}

// Client API for GueryExecutor service

type GueryExecutorClient interface {
	Quit(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Duplicate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SendInstruction(ctx context.Context, in *Instruction, opts ...grpc.CallOption) (*Empty, error)
	GetOutputChannelLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Location, error)
}

type gueryExecutorClient struct {
	cc *grpc.ClientConn
}

func NewGueryExecutorClient(cc *grpc.ClientConn) GueryExecutorClient {
	return &gueryExecutorClient{cc}
}

func (c *gueryExecutorClient) Quit(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.GueryExecutor/Quit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryExecutorClient) Duplicate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.GueryExecutor/Duplicate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryExecutorClient) SendInstruction(ctx context.Context, in *Instruction, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.GueryExecutor/SendInstruction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gueryExecutorClient) GetOutputChannelLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := grpc.Invoke(ctx, "/pb.GueryExecutor/GetOutputChannelLocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GueryExecutor service

type GueryExecutorServer interface {
	Quit(context.Context, *Empty) (*Empty, error)
	Duplicate(context.Context, *Empty) (*Empty, error)
	SendInstruction(context.Context, *Instruction) (*Empty, error)
	GetOutputChannelLocation(context.Context, *Location) (*Location, error)
}

func RegisterGueryExecutorServer(s *grpc.Server, srv GueryExecutorServer) {
	s.RegisterService(&_GueryExecutor_serviceDesc, srv)
}

func _GueryExecutor_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryExecutorServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryExecutor/Quit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryExecutorServer).Quit(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryExecutor_Duplicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryExecutorServer).Duplicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryExecutor/Duplicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryExecutorServer).Duplicate(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryExecutor_SendInstruction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Instruction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryExecutorServer).SendInstruction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryExecutor/SendInstruction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryExecutorServer).SendInstruction(ctx, req.(*Instruction))
	}
	return interceptor(ctx, in, info, handler)
}

func _GueryExecutor_GetOutputChannelLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GueryExecutorServer).GetOutputChannelLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GueryExecutor/GetOutputChannelLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GueryExecutorServer).GetOutputChannelLocation(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

var _GueryExecutor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GueryExecutor",
	HandlerType: (*GueryExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Quit",
			Handler:    _GueryExecutor_Quit_Handler,
		},
		{
			MethodName: "Duplicate",
			Handler:    _GueryExecutor_Duplicate_Handler,
		},
		{
			MethodName: "SendInstruction",
			Handler:    _GueryExecutor_SendInstruction_Handler,
		},
		{
			MethodName: "GetOutputChannelLocation",
			Handler:    _GueryExecutor_GetOutputChannelLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guery.proto",
}

func init() { proto.RegisterFile("guery.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0x6e, 0x9a, 0x66, 0xb7, 0x99, 0x6c, 0x29, 0x58, 0x08, 0x45, 0x15, 0x42, 0x55, 0xb8, 0x54,
	0x48, 0x14, 0x51, 0x10, 0xe2, 0x4c, 0x59, 0x2d, 0x95, 0xca, 0x42, 0x5d, 0xc4, 0xdd, 0x49, 0x46,
	0x6c, 0xb4, 0xa9, 0x1d, 0x25, 0xb6, 0xb4, 0xbd, 0xf3, 0x00, 0x5c, 0x78, 0x1e, 0x1e, 0x86, 0x17,
	0x41, 0x76, 0xf3, 0x5b, 0xba, 0x37, 0x7f, 0xf3, 0x8d, 0xc7, 0xdf, 0xcc, 0x7c, 0x06, 0xef, 0x87,
	0xc2, 0x7c, 0x3f, 0xcf, 0x72, 0x21, 0x05, 0xe9, 0x67, 0x61, 0x70, 0x0e, 0xce, 0xe5, 0x2e, 0x93,
	0xfb, 0xe0, 0x97, 0x05, 0xc3, 0xb5, 0x88, 0x98, 0x4c, 0x04, 0x27, 0xcf, 0x00, 0x62, 0x26, 0xd9,
	0x12, 0xb9, 0xc4, 0xdc, 0xb7, 0xa6, 0xd6, 0xcc, 0xa5, 0xad, 0x08, 0x21, 0x30, 0xc8, 0x59, 0x74,
	0xeb, 0xf7, 0x0d, 0x63, 0xce, 0xc4, 0x87, 0x73, 0x16, 0xc7, 0x39, 0x16, 0x85, 0x6f, 0x9b, 0x70,
	0x05, 0x75, 0x36, 0x67, 0x3b, 0xf4, 0x07, 0x87, 0x6c, 0x7d, 0x26, 0x01, 0x5c, 0x44, 0x37, 0x8c,
	0x73, 0x4c, 0x57, 0x3c, 0xc6, 0x3b, 0xdf, 0x99, 0x5a, 0x33, 0x87, 0x76, 0x62, 0xc1, 0x4f, 0x0b,
	0xdc, 0x4f, 0xc8, 0x72, 0x19, 0x22, 0x93, 0x64, 0x06, 0xc3, 0xb4, 0xd4, 0x67, 0x14, 0x79, 0x8b,
	0x8b, 0x79, 0x16, 0xce, 0x2b, 0xcd, 0xb4, 0x66, 0xc9, 0x04, 0x86, 0x39, 0x16, 0x42, 0xe5, 0x11,
	0x1a, 0x85, 0x0e, 0xad, 0x31, 0x79, 0x0d, 0x5e, 0xc2, 0x0b, 0x99, 0xab, 0xc8, 0x14, 0xb2, 0x4d,
	0xa1, 0xb1, 0x2e, 0xb4, 0x6a, 0xc2, 0xb4, 0x9d, 0x13, 0xfc, 0xb5, 0xc0, 0x6b, 0x91, 0xe4, 0x09,
	0x9c, 0x49, 0x56, 0xdc, 0xae, 0x62, 0x23, 0xc3, 0xa1, 0x25, 0xd2, 0xcf, 0xea, 0xd3, 0xb7, 0x7d,
	0x56, 0x3f, 0x5b, 0x61, 0xf2, 0x16, 0x1e, 0x24, 0x3c, 0x53, 0xb2, 0x52, 0xab, 0x67, 0x64, 0xff,
	0xd7, 0xc2, 0x51, 0x0e, 0x79, 0x07, 0x63, 0xa1, 0x64, 0xe7, 0xda, 0xe0, 0xc4, 0xb5, 0xe3, 0x24,
	0xb2, 0x80, 0xc7, 0xc8, 0x23, 0x11, 0x63, 0xfc, 0x35, 0x65, 0xfc, 0x5a, 0xc4, 0xf8, 0x61, 0x2f,
	0xb1, 0x30, 0x43, 0x76, 0xe9, 0x49, 0x2e, 0x78, 0x0a, 0xc3, 0x8d, 0xf6, 0xc6, 0x76, 0xb3, 0x26,
	0x0f, 0xc1, 0xde, 0x6e, 0xd6, 0xe5, 0xde, 0xf5, 0x31, 0xf8, 0x6d, 0xc1, 0xc8, 0xd0, 0x14, 0x8b,
	0x4c, 0xf0, 0xc2, 0x2c, 0x70, 0x29, 0x52, 0xb5, 0xe3, 0xd7, 0x6a, 0x17, 0x96, 0x26, 0x71, 0x68,
	0x27, 0xa6, 0x6d, 0x54, 0x62, 0xbd, 0xfe, 0xfe, 0xd4, 0xd6, 0x36, 0x6a, 0x22, 0x0d, 0x6f, 0x66,
	0x66, 0xb7, 0x79, 0x33, 0xb5, 0x29, 0x78, 0x07, 0xf4, 0x9d, 0xa5, 0x0a, 0x4d, 0xef, 0x2e, 0x6d,
	0x87, 0x16, 0x37, 0xe0, 0x5d, 0x69, 0x59, 0x9f, 0x59, 0xa1, 0x7d, 0xf9, 0x12, 0x46, 0x5b, 0xe4,
	0x71, 0x63, 0x9a, 0x91, 0x1e, 0x54, 0x0d, 0x27, 0xae, 0x86, 0x07, 0xbf, 0xf7, 0x66, 0x16, 0x79,
	0x01, 0x8e, 0x69, 0x8a, 0x98, 0x79, 0x56, 0xed, 0x4f, 0x1e, 0xd5, 0xa8, 0xea, 0x36, 0xe8, 0x2d,
	0xfe, 0x58, 0x30, 0x32, 0x4f, 0x5d, 0xde, 0x61, 0xa4, 0xa4, 0xd0, 0xdd, 0x0d, 0x36, 0x2a, 0x91,
	0xa4, 0x29, 0xda, 0xa9, 0x4f, 0x9e, 0x83, 0xfb, 0x51, 0x65, 0x69, 0x12, 0x31, 0x89, 0xf7, 0x26,
	0xbd, 0x82, 0xb1, 0x56, 0xdc, 0xf6, 0xd7, 0xb1, 0x1b, 0xbb, 0x17, 0xde, 0x83, 0x7f, 0x85, 0xf2,
	0x8b, 0xd9, 0xf8, 0xf2, 0xf0, 0x5b, 0xea, 0x6f, 0xdb, 0xb1, 0xc5, 0xa4, 0x83, 0x82, 0x5e, 0x78,
	0x66, 0x7e, 0xfd, 0x9b, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xca, 0x86, 0xea, 0x5a, 0x04, 0x04,
	0x00, 0x00,
}
